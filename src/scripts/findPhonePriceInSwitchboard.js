/**
 * Script t√¨m gi√° ƒëi·ªán tho·∫°i trong feed Switchboard b·∫±ng c√°ch qu√©t m·ªçi offset c√≥ th·ªÉ
 * 
 * Script n√†y s·∫Ω ph√¢n t√≠ch chi ti·∫øt feed Switchboard v√† t√¨m gi√° ƒëi·ªán tho·∫°i $9.99
 * b·∫±ng c√°ch qu√©t t·ª´ng ph·∫ßn d·ªØ li·ªáu v√† c·ªë g·∫Øng gi·∫£i m√£ ƒë√∫ng ƒë·ªãnh d·∫°ng.
 */
require('dotenv').config();
const { 
  Connection, 
  PublicKey, 
  clusterApiUrl 
} = require('@solana/web3.js');
const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh Switchboard
const SWITCHBOARD_AGGREGATOR_PUBKEY = process.env.SWITCHBOARD_AGGREGATOR_PUBKEY || 'GMewztoqs2ZPU36qLgB1b3yWVte5XgeDhCkGutxr6ZnW';
const SWITCHBOARD_ON_DEMAND_PROGRAM_ID = 'Aio4gaXjXzJNVLtzwtNVmSqGKpANtXhybbkhtAC94ji2';
const TARGET_PRICE = 9.99; // Gi√° c·∫ßn t√¨m
const DECIMAL_PRECISION = 2; // S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n c·∫ßn ch√≠nh x√°c
const PRICE_TOLERANCE = 0.01; // Dung sai cho ph√©p

// C√°c offset ƒë√£ bi·∫øt cho On-Demand Feeds (d·ª±a tr√™n IDL)
const KNOWN_OFFSETS = [
  { name: 'Discriminator', offset: 0, size: 8 },
  { name: 'Version', offset: 8, size: 1 },
  { name: 'Feed Config', offset: 9, size: 32 },
  { name: 'Target', offset: 41, size: 32 },
  { name: 'Result Ng√¢n h√†ng', offset: 73, size: 32 },
  { name: 'Transmission', offset: 105, size: 32 },
  // C√°c offset ti·ªÅm nƒÉng cho gi√° tr·ªã (t·ª´ ph√¢n t√≠ch tr∆∞·ªõc ƒë√≥)
  { name: 'Gi√° tr·ªã ti·ªÅm nƒÉng 1', offset: 2152, size: 8 },
  { name: 'Gi√° tr·ªã ti·ªÅm nƒÉng 2', offset: 2168, size: 8 },
  { name: 'Gi√° tr·ªã ti·ªÅm nƒÉng 3', offset: 2176, size: 8 },
  { name: 'Gi√° tr·ªã ti·ªÅm nƒÉng 4', offset: 2224, size: 8 },
  { name: 'Gi√° tr·ªã ti·ªÅm nƒÉng 5', offset: 2392, size: 8 },
];

// H√†m x·ª≠ l√Ω BigInt khi serialize JSON
function replacer(key, value) {
  if (typeof value === 'bigint') {
    return value.toString();
  }
  return value;
}

/**
 * Xu·∫•t d·ªØ li·ªáu d∆∞·ªõi d·∫°ng hex ƒë·ªÉ ph√¢n t√≠ch
 */
function hexDump(buffer, offset = 0, length = 8) {
  const end = Math.min(offset + length, buffer.length);
  const data = buffer.slice(offset, end);
  const hexView = Buffer.from(data).toString('hex').match(/.{1,2}/g).join(' ');
  return `${hexView}`;
}

/**
 * L∆∞u k·∫øt qu·∫£ v√†o file ƒë·ªÉ ph√¢n t√≠ch
 */
function saveResultToFile(result) {
  try {
    if (!fs.existsSync('./data')) {
      fs.mkdirSync('./data', { recursive: true });
    }
    
    const filePath = path.join('./data', 'switchboard_analysis.json');
    fs.writeFileSync(filePath, JSON.stringify(result, null, 2, replacer));
    console.log(`‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o: ${filePath}`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£: ${error.message}`);
  }
}

/**
 * T√¨m c√°c gi√° tr·ªã ti·ªÅm nƒÉng trong d·ªØ li·ªáu t√†i kho·∫£n
 */
function findPotentialValues(data) {
  const possibleValues = [];
  const potentialDecimals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  
  // Qu√©t qua t·ª´ng offset v·ªõi b∆∞·ªõc nh·ªè h∆°n ƒë·ªÉ ki·ªÉm tra k·ªπ h∆°n
  for (let i = 0; i < data.length - 8; i++) {
    try {
      // ƒê·ªçc 8 bytes d∆∞·ªõi d·∫°ng BigInt
      const slice = data.slice(i, i + 8);
      if (slice.length === 8) {
        const valueAsInt64 = Buffer.from(slice).readBigInt64LE();
        
        // X·ª≠ l√Ω gi√° tr·ªã BigInt
        if (valueAsInt64 > BigInt(0) && valueAsInt64 < BigInt(1e15)) {
          // Th·ª≠ v·ªõi c√°c decimal kh√°c nhau
          for (const decimal of potentialDecimals) {
            const valueWithDecimal = Number(valueAsInt64) / Math.pow(10, decimal);
            
            // Ki·ªÉm tra n·∫øu gi√° tr·ªã g·∫ßn v·ªõi gi√° m·ª•c ti√™u
            if (Math.abs(valueWithDecimal - TARGET_PRICE) < PRICE_TOLERANCE) {
              possibleValues.push({
                offset: i,
                offsetHex: '0x' + i.toString(16).padStart(4, '0'),
                type: 'i64',
                rawValue: valueAsInt64.toString(),
                decimal,
                value: valueWithDecimal,
                diff: Math.abs(valueWithDecimal - TARGET_PRICE),
                hex: hexDump(data, i, 8)
              });
            }
          }
        }
      }
      
      // Th·ª≠ ƒë·ªçc 8 bytes d∆∞·ªõi d·∫°ng double
      try {
        const valueAsDouble = Buffer.from(slice).readDoubleLE();
        if (!isNaN(valueAsDouble) && valueAsDouble > 0 && 
            Math.abs(valueAsDouble - TARGET_PRICE) < PRICE_TOLERANCE) {
          possibleValues.push({
            offset: i,
            offsetHex: '0x' + i.toString(16).padStart(4, '0'),
            type: 'f64',
            value: valueAsDouble,
            diff: Math.abs(valueAsDouble - TARGET_PRICE),
            hex: hexDump(data, i, 8)
          });
        }
      } catch (e) {
        // B·ªè qua l·ªói
      }
      
      // Th·ª≠ ƒë·ªçc 4 bytes d∆∞·ªõi d·∫°ng float
      if (i + 4 <= data.length) {
        try {
          const float32Slice = data.slice(i, i + 4);
          const valueAsFloat = Buffer.from(float32Slice).readFloatLE();
          if (!isNaN(valueAsFloat) && valueAsFloat > 0 && 
              Math.abs(valueAsFloat - TARGET_PRICE) < PRICE_TOLERANCE) {
            possibleValues.push({
              offset: i,
              offsetHex: '0x' + i.toString(16).padStart(4, '0'),
              type: 'f32',
              value: valueAsFloat,
              diff: Math.abs(valueAsFloat - TARGET_PRICE),
              hex: hexDump(data, i, 4)
            });
          }
        } catch (e) {
          // B·ªè qua l·ªói
        }
      }
      
      // Th·ª≠ t√¨m theo gi√° tr·ªã ƒë·ªãnh d·∫°ng c·ª• th·ªÉ cho 9.99
      // 9.99 d∆∞·ªõi d·∫°ng i64 v·ªõi 2 s·ªë th·∫≠p ph√¢n l√† 999
      if (slice.length >= 4) {
        try {
          const valueAsInt32 = Buffer.from(slice.slice(0, 4)).readInt32LE();
          if (valueAsInt32 === 999) {
            possibleValues.push({
              offset: i,
              offsetHex: '0x' + i.toString(16).padStart(4, '0'),
              type: 'exact match i32',
              rawValue: valueAsInt32.toString(),
              decimal: 2,
              value: valueAsInt32 / 100,
              diff: 0,
              hex: hexDump(data, i, 4)
            });
          }
        } catch (e) {
          // B·ªè qua l·ªói
        }
      }
    } catch (e) {
      // B·ªè qua l·ªói
    }
  }
  
  return possibleValues;
}

/**
 * Ki·ªÉm tra c√°c offset ƒë√£ bi·∫øt
 */
function checkKnownOffsets(data) {
  const results = [];
  
  for (const { name, offset, size } of KNOWN_OFFSETS) {
    if (offset + size <= data.length) {
      try {
        let value = null;
        let display = '';
        
        if (size === 8) {
          // ƒê·ªçc i64
          const slice = data.slice(offset, offset + size);
          const valueAsInt64 = Buffer.from(slice).readBigInt64LE();
          value = valueAsInt64.toString();
          
          // Th·ª≠ v·ªõi c√°c decimal kh√°c nhau
          const potentialFormats = [0, 3, 6, 9].map(decimal => {
            const formatted = Number(valueAsInt64) / Math.pow(10, decimal);
            return {
              decimal,
              value: formatted,
              display: formatted.toFixed(decimal)
            };
          });
          
          // Th√™m d·∫°ng double
          try {
            const valueAsDouble = Buffer.from(slice).readDoubleLE();
            if (!isNaN(valueAsDouble)) {
              potentialFormats.push({
                type: 'f64',
                value: valueAsDouble,
                display: valueAsDouble.toFixed(6)
              });
            }
          } catch (e) {
            // B·ªè qua l·ªói
          }
          
          display = potentialFormats.map(f => 
            f.type ? `${f.display} (${f.type})` : `${f.display} (decimal: ${f.decimal})`
          ).join(', ');
        } else {
          // C√°c tr∆∞·ªùng nh·ªè h∆°n 8 bytes
          const slice = data.slice(offset, offset + size);
          const hex = Buffer.from(slice).toString('hex');
          
          if (size === 1) {
            value = slice[0];
            display = `${value} (0x${hex})`;
          } else if (size === 4) {
            try {
              const int32Value = Buffer.from(slice).readInt32LE();
              const floatValue = Buffer.from(slice).readFloatLE();
              value = { int32: int32Value, float: floatValue };
              display = `int32: ${int32Value}, float: ${floatValue.toFixed(6)}, hex: 0x${hex}`;
            } catch (e) {
              display = `hex: 0x${hex}`;
            }
          } else {
            // Tr∆∞·ªùng d√†i, hi·ªÉn th·ªã d·∫°ng hex
            value = hex;
            display = `0x${hex}`;
          }
        }
        
        results.push({
          name,
          offset,
          size,
          hex: hexDump(data, offset, size),
          value,
          display
        });
      } catch (e) {
        results.push({
          name, 
          offset,
          size,
          error: e.message
        });
      }
    }
  }
  
  return results;
}

/**
 * Qu√©t chi ti·∫øt ph·∫ßn cu·ªëi d·ªØ li·ªáu - n∆°i th∆∞·ªùng ch·ª©a gi√° tr·ªã
 */
function scanLastPortion(data) {
  console.log('\nüî¨ Qu√©t chi ti·∫øt ph·∫ßn cu·ªëi d·ªØ li·ªáu:');
  
  // B·∫Øt ƒë·∫ßu t·ª´ byte 2000 (th∆∞·ªùng ch·ª©a d·ªØ li·ªáu quan tr·ªçng)
  const startOffset = Math.max(data.length - 1000, 0);
  const endOffset = data.length;
  
  for (let i = startOffset; i < endOffset; i += 16) {
    const len = Math.min(16, endOffset - i);
    const slice = data.slice(i, i + len);
    const hexStr = Buffer.from(slice).toString('hex').match(/.{1,2}/g).join(' ');
    
    // T·∫°o hi·ªÉn th·ªã ASCII
    let asciiStr = '';
    for (let j = 0; j < slice.length; j++) {
      const byte = slice[j];
      if (byte >= 32 && byte <= 126) {
        asciiStr += String.fromCharCode(byte);
      } else {
        asciiStr += '.';
      }
    }
    
    const offsetHex = '0x' + i.toString(16).padStart(4, '0');
    console.log(`${offsetHex}: ${hexStr.padEnd(48, ' ')} | ${asciiStr}`);
    
    // Th·ª≠ ƒë·ªçc gi√° tr·ªã t·∫°i m·ªói v·ªã tr√≠ v·ªõi c√°c ƒë·ªãnh d·∫°ng kh√°c nhau
    for (let j = 0; j < len - 3; j++) {
      const subSlice = slice.slice(j, j + 4);
      try {
        const int32Value = Buffer.from(subSlice).readInt32LE();
        // Ki·ªÉm tra n·∫øu gi√° tr·ªã c√≥ th·ªÉ l√† 999 (9.99 v·ªõi 2 s·ªë th·∫≠p ph√¢n)
        if (int32Value === 999) {
          console.log(`  üîç T·∫°i ${offsetHex + j}: C√≥ th·ªÉ l√† 9.99 (int32: ${int32Value})`);
        }
      } catch (e) {
        // B·ªè qua
      }
    }
  }
}

/**
 * Ph√¢n t√≠ch feed Switchboard v√† t√¨m gi√° ƒëi·ªán tho·∫°i
 */
async function findPhonePriceInSwitchboard() {
  console.log(`üîç ƒêang t√¨m ki·∫øm gi√° ƒëi·ªán tho·∫°i $${TARGET_PRICE} trong feed: ${SWITCHBOARD_AGGREGATOR_PUBKEY}`);
  
  try {
    // K·∫øt n·ªëi ƒë·∫øn Solana devnet
    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
    const aggregatorPubkey = new PublicKey(SWITCHBOARD_AGGREGATOR_PUBKEY);
    
    // L·∫•y th√¥ng tin t√†i kho·∫£n
    const accountInfo = await connection.getAccountInfo(aggregatorPubkey);
    
    if (!accountInfo) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi pubkey: ${SWITCHBOARD_AGGREGATOR_PUBKEY}`);
      return;
    }
    
    console.log(`‚úÖ ƒê√£ t√¨m th·∫•y t√†i kho·∫£n!`);
    console.log(`üîë Owner: ${accountInfo.owner.toString()}`);
    console.log(`üìä K√≠ch th∆∞·ªõc d·ªØ li·ªáu: ${accountInfo.data.length} bytes`);
    
    // Ki·ªÉm tra discriminator ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i feed
    const discriminator = Buffer.from(accountInfo.data.slice(0, 8)).toString('hex');
    console.log(`üÜî Discriminator: 0x${discriminator}`);
    
    // Ki·ªÉm tra c√°c offset ƒë√£ bi·∫øt
    console.log('\nüìã Ki·ªÉm tra c√°c offset ƒë√£ bi·∫øt:');
    const knownOffsetResults = checkKnownOffsets(accountInfo.data);
    knownOffsetResults.forEach(result => {
      if (result.error) {
        console.log(`- ${result.name} (offset ${result.offset}): L·ªói: ${result.error}`);
      } else {
        console.log(`- ${result.name} (offset ${result.offset}, size ${result.size}): ${result.display}`);
        console.log(`  Hex: ${result.hex}`);
      }
    });
    
    // Qu√©t chi ti·∫øt ph·∫ßn cu·ªëi d·ªØ li·ªáu
    scanLastPortion(accountInfo.data);
    
    // T√¨m c√°c gi√° tr·ªã ti·ªÅm nƒÉng b·∫±ng c√°ch qu√©t to√†n b·ªô d·ªØ li·ªáu
    console.log('\nüîé T√¨m ki·∫øm gi√° tr·ªã g·∫ßn $9.99:');
    const possibleValues = findPotentialValues(accountInfo.data);
    
    if (possibleValues.length > 0) {
      // S·∫Øp x·∫øp theo ƒë·ªô ch√≠nh x√°c (diff t·ª´ nh·ªè ƒë·∫øn l·ªõn)
      possibleValues.sort((a, b) => a.diff - b.diff);
      
      console.log(`‚úÖ ƒê√£ t√¨m th·∫•y ${possibleValues.length} gi√° tr·ªã ti·ªÅm nƒÉng:`);
      
      possibleValues.forEach((value, index) => {
        let valueInfo = '';
        
        if (value.type === 'f32' || value.type === 'f64') {
          valueInfo = `${value.value.toFixed(DECIMAL_PRECISION)} (${value.type})`;
        } else if (value.type === 'exact match i32') {
          valueInfo = `${value.value.toFixed(DECIMAL_PRECISION)} (CH√çNH X√ÅC - raw: ${value.rawValue}, decimals: ${value.decimal})`;
        } else {
          valueInfo = `${value.value.toFixed(DECIMAL_PRECISION)} (raw: ${value.rawValue}, decimals: ${value.decimal})`;
        }
        
        console.log(`${index + 1}. Offset ${value.offset} ${value.offsetHex}: ${valueInfo}`);
        console.log(`   Ch√™nh l·ªách: ${value.diff.toFixed(DECIMAL_PRECISION)}`);
        console.log(`   Hex: ${value.hex}`);
      });
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªët nh·∫•t
      const bestMatch = possibleValues[0];
      console.log(`\n‚ú® K·∫øt qu·∫£ ph√π h·ª£p nh·∫•t: ${bestMatch.value.toFixed(DECIMAL_PRECISION)} t·∫°i offset ${bestMatch.offset} (${bestMatch.offsetHex})`);
      
      if (bestMatch.type === 'i64') {
        console.log(`   D·∫°ng s·ªë nguy√™n: ${bestMatch.rawValue}`);
        console.log(`   S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n: ${bestMatch.decimal}`);
      } else if (bestMatch.type === 'exact match i32') {
        console.log(`   D·∫°ng s·ªë nguy√™n 32-bit: ${bestMatch.rawValue}`);
        console.log(`   S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n: ${bestMatch.decimal}`);
      } else {
        console.log(`   Ki·ªÉu d·ªØ li·ªáu: ${bestMatch.type}`);
      }
      
      console.log(`   Hex: ${bestMatch.hex}`);
      
      // L∆∞u k·∫øt qu·∫£ v√†o file
      const result = {
        pubkey: SWITCHBOARD_AGGREGATOR_PUBKEY,
        owner: accountInfo.owner.toString(),
        dataSize: accountInfo.data.length,
        discriminator,
        knownOffsetResults,
        possibleValues,
        bestMatch: {
          offset: bestMatch.offset,
          offsetHex: bestMatch.offsetHex,
          type: bestMatch.type,
          rawValue: bestMatch.rawValue,
          decimal: bestMatch.decimal,
          value: bestMatch.value,
          diff: bestMatch.diff,
          hex: bestMatch.hex
        },
        timestamp: new Date().toISOString()
      };
      
      saveResultToFile(result);
      
      return bestMatch.value;
    } else {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y gi√° tr·ªã n√†o g·∫ßn v·ªõi $${TARGET_PRICE}`);
      
      // L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ tham kh·∫£o sau
      const result = {
        pubkey: SWITCHBOARD_AGGREGATOR_PUBKEY,
        owner: accountInfo.owner.toString(),
        dataSize: accountInfo.data.length,
        discriminator,
        knownOffsetResults,
        timestamp: new Date().toISOString()
      };
      
      saveResultToFile(result);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi t√¨m gi√° ƒëi·ªán tho·∫°i t·ª´ Switchboard: ${error.message}`);
    return null;
  }
}

// Ch·∫°y script
findPhonePriceInSwitchboard()
  .then(price => {
    if (price !== null) {
      console.log(`\nüí∞ Gi√° ƒëi·ªán tho·∫°i t√¨m th·∫•y: $${price.toFixed(DECIMAL_PRECISION)}`);
      console.log(`üì± ƒê·ªçc th√†nh c√¥ng gi√° t·ª´ feed Switchboard!`);
    } else {
      console.log(`\n‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m th·∫•y gi√° ch√≠nh x√°c tr√™n feed Switchboard.`);
      console.log(`üí° B·∫°n c√≥ th·ªÉ c·∫ßn ph·∫£i c·∫≠p nh·∫≠t feed v·ªõi gi√° m·ªõi ho·∫∑c ki·ªÉm tra l·∫°i c·∫•u tr√∫c d·ªØ li·ªáu.`);
    }
  }); 